require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe BooksController, type: :controller do
  include Devise::Test::ControllerHelpers

  # This should return the minimal set of attributes required to create a valid
  # Book. As you add validations to Book, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { 'title' => 'Pickaxe Ruby' }
  end

  let(:invalid_attributes) do
    { 'title' => nil }
  end

  describe "GET #index" do
    it "returns a success response" do
      book = Book.create! valid_attributes
      get :index, params: {}
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      book = Book.create! valid_attributes
      get :show, params: {id: book.to_param}
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "does not allow to creat a new Book" do
        expect {
          post :create, params: {book: valid_attributes}
        }.not_to change(Book, :count)
      end

      it "redirects to the books" do
        post :create, params: {book: valid_attributes}
        expect(response).to redirect_to(books_url)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { 'title' => 'Pickaxe Ruby 2' }
      }

      it "updates the requested book" do
        book = Book.create! valid_attributes
        put :update, params: {id: book.to_param, book: new_attributes}
        expect(book.reload.attributes.except('id', 'created_at', 'updated_at')).to eq(valid_attributes)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested book" do
      book = Book.create! valid_attributes
      expect {
        delete :destroy, params: {id: book.to_param}
      }.not_to change(Book, :count)
    end

    it "redirects to the books list" do
      book = Book.create! valid_attributes
      delete :destroy, params: {id: book.to_param}
      expect(response).to redirect_to(books_url)
    end
  end

  context 'when signed in' do
    before do
      sign_in User.create
    end

    describe "GET #new" do
      it "returns a success response" do
        get :new, params: {}
        expect(response).to be_success
      end
    end

    describe "GET #edit" do
      it "returns a success response" do
        book = Book.create! valid_attributes
        get :edit, params: {id: book.to_param}
        expect(response).to be_success
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Book" do
          expect {
            post :create, params: {book: valid_attributes}
          }.to change(Book, :count).by(1)
        end

        it "redirects to the created book" do
          post :create, params: {book: valid_attributes}
          expect(response).to redirect_to(Book.last)
        end
      end

      context "with invalid params" do
        it "returns a success response (i.e. to display the 'new' template)" do
          post :create, params: {book: invalid_attributes}
          expect(response).to be_success
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          { 'title' => 'Pickaxe Ruby 2' }
        }

        it "updates the requested book" do
          book = Book.create! valid_attributes
          put :update, params: {id: book.to_param, book: new_attributes}
          expect(book.reload.attributes.except('id', 'created_at', 'updated_at')).to eq(new_attributes)
        end
      end

      context "with invalid params" do
        it "returns a success response (i.e. to display the 'edit' template)" do
          book = Book.create! valid_attributes
          put :update, params: {id: book.to_param, book: invalid_attributes}
          expect(response).to be_success
          expect(book.reload.attributes.except('id', 'created_at', 'updated_at')).to eq(valid_attributes)
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested book" do
        book = Book.create! valid_attributes
        expect {
          delete :destroy, params: {id: book.to_param}
        }.to change(Book, :count).by(-1)
      end

      it "redirects to the books list" do
        book = Book.create! valid_attributes
        delete :destroy, params: {id: book.to_param}
        expect(response).to redirect_to(books_url)
      end
    end
  end
end
